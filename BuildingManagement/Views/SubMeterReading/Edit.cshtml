@model BuildingManagement.Models.SubMeterReading

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>SubMeterReading</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ID)

    <div class="form-group">
        @Html.LabelFor(model => model.Index, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Index, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
            @Html.ValidationMessageFor(model => model.Index, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
            @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("SubMeter Code", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("SubMeterID", null, "Select...", htmlAttributes: new { @class = "form-control", onchange = "GetMeterTypes(this.value)" })
            @Html.ValidationMessageFor(model => model.SubMeterID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.MeterType, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("MeterTypeID", new List<SelectListItem>(), htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.MeterTypeID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DiscountMonth, htmlAttributes: new {@id = "DiscountMonthLabel", @class = "control-label col-md-2"})
        <div class="col-md-10">
            @Html.EditorFor(model => model.DiscountMonth, new {htmlAttributes = new {@id = "DiscountMonth", @class = "form-control", autocomplete = "off"}})
            @Html.ValidationMessageFor(model => model.DiscountMonth, "", new {@class = "text-danger"})
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Initial, htmlAttributes: new {@class = "control-label col-md-2"})
        <div class="col-md-10">
            <div class="checkbox" onclick="OnChangeEvent()">
                @Html.EditorFor(model => model.Initial)
                @Html.ValidationMessageFor(model => model.Initial, "", new {@class = "text-danger"})
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Estimated, htmlAttributes: new { @id = "EstimatedLabel", @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.Estimated, new { htmlAttributes = new { @id = "Estimated" } })
                @Html.ValidationMessageFor(model => model.Estimated, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" onclick="ValidateAll('Edit')" />
        </div>
    </div>
</div>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script src="~/Scripts/jquery-3.3.1.js"></script>
<script src="~/Scripts/SubMeterReadingUtils.js"></script>
<script src="~/Scripts/ValidateSubMeterReading.js"></script>
<script src="~/Scripts/ValidateFields.js"></script>
<script src="~/Scripts/SubmitPage.js"></script>
<script src="~/Scripts/ReadingUitls.js"></script>
<script>
    $(document).ready(function() {
        GetMeterTypes(@Model.SubMeterID, @Model.MeterTypeID);
        OnChangeEvent();
    });
</script>
